import bluetooth.BtCommunication;
import msg.CommandUtil;

import javax.microedition.io.StreamConnection;
import javax.swing.*;
import java.awt.*;

public class GUIBT extends javax.swing.JPanel implements Runnable, CreateGUICommand {

    public final boolean isServer;
    JFrame app;
    private final BtCommunication btcomm;
    StreamConnection conn;
    private String rxString;
    private String[] rxCommands;

    /**
     * Creates new form NewJPanel
     */
    public GUIBT(boolean type) {
        initComponents();
        bluechess = new ImageIcon(getClass().getResource("images2/bluechess.png"));
        logo.setIcon(bluechess);
        logo.setText(null);
        isServer = type;
        btcomm = new BtCommunication();
        chatString = new String[500];
        chatCount = 0;
    }

    public Container createGUI(JFrame mainApp) {

        app = mainApp;
        windowChessGameController = new WindowChessGameController();
        windowChessGameController.makeWindowChessGameBT(true);

        //change the names
        windowChessGameController.BTGameSetNames("Player1", "Player2");
        chessPanel.add(windowChessGameController.windowChessGameBT);
        chessPanel.setBorder(BorderFactory.createEtchedBorder());
        //chessPanel.setVisible(true);
        chattext.setEnabled(false);
        send.setEnabled(false);
        status.setText("Click Start Button to start Game");
        if (isServer) {
            serverorclient.setText("You are Server");
        } else {
            serverorclient.setText("You are Client");


        }
        return chessPanel;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startButton = new javax.swing.JButton();
        chatPanel = new javax.swing.JPanel();
        chattext = new javax.swing.JTextField();
        send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatHistory = new javax.swing.JList<>();
        quitButton = new javax.swing.JButton();
        boardPanel = new javax.swing.JPanel();
        chessPanel = new javax.swing.JPanel();
        status = new javax.swing.JLabel();
        serverorclient = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        movementHistory = new javax.swing.JList<>();

        setBackground(new Color(51, 51, 51));
        setBorder(BorderFactory.createEtchedBorder());
        setMaximumSize(new Dimension(0, 0));
        setPreferredSize(new Dimension(669, 540));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        startButton.setBackground(new Color(102, 102, 102));
        startButton.setFont(new java.awt.Font("Tahoma", Font.BOLD, 18));
        startButton.setText("Start");
        startButton.addActionListener(this::startButtonActionPerformed);
        add(startButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 170, -1));

        chatPanel.setBackground(new Color(51, 51, 51));
        chatPanel.setBorder(BorderFactory.createTitledBorder(null, "Chat Window", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new Color(255, 255, 255))); // NOI18N

        chattext.setText("Chat Text");
        chattext.addActionListener(this::chattextActionPerformed);

        send.setText("Send");
        send.addActionListener(this::sendActionPerformed);

        chatHistory.setModel(new javax.swing.AbstractListModel<String>() {
            final String[] strings = {"Chat History"};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane1.setViewportView(chatHistory);

        javax.swing.GroupLayout chatPanelLayout = new javax.swing.GroupLayout(chatPanel);
        chatPanel.setLayout(chatPanelLayout);
        chatPanelLayout.setHorizontalGroup(
                chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(chatPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(chatPanelLayout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                                .addContainerGap())
                                        .addGroup(chatPanelLayout.createSequentialGroup()
                                                .addComponent(chattext, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(send)
                                                .addGap(22, 22, 22))))
        );
        chatPanelLayout.setVerticalGroup(
                chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chatPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(chattext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );

        add(chatPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 250, 200, 220));
        chatPanel.getAccessibleContext().setAccessibleName("Chat Area");

        quitButton.setFont(new java.awt.Font("Tahoma", Font.BOLD, 18));
        quitButton.setForeground(new Color(255, 51, 102));
        quitButton.setText("Quit");
        quitButton.addActionListener(this::quitButtonActionPerformed);
        add(quitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 490, 119, -1));

        boardPanel.setBackground(new Color(51, 51, 51));
        boardPanel.setBorder(BorderFactory.createTitledBorder(null, "Chess Board", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new Color(255, 255, 255))); // NOI18N
        boardPanel.setPreferredSize(new Dimension(420, 470));

        chessPanel.setBackground(new Color(51, 51, 51));
        chessPanel.setPreferredSize(new Dimension(410, 440));
        chessPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                chessPanelMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout chessPanelLayout = new javax.swing.GroupLayout(chessPanel);
        chessPanel.setLayout(chessPanelLayout);
        chessPanelLayout.setHorizontalGroup(
                chessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 405, Short.MAX_VALUE)
        );
        chessPanelLayout.setVerticalGroup(
                chessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 443, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout boardPanelLayout = new javax.swing.GroupLayout(boardPanel);
        boardPanel.setLayout(boardPanelLayout);
        boardPanelLayout.setHorizontalGroup(
                boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(boardPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(chessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(13, Short.MAX_VALUE))
        );
        boardPanelLayout.setVerticalGroup(
                boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(chessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
        );

        add(boardPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 440, 470));

        status.setFont(new java.awt.Font("Tahoma", Font.PLAIN, 12));
        status.setForeground(new Color(102, 255, 255));
        status.setText("Communication Status");
        add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 500, 190, -1));

        serverorclient.setFont(new java.awt.Font("Tahoma", Font.BOLD, 14));
        serverorclient.setForeground(new Color(51, 255, 255));
        serverorclient.setText("Server or Client");
        add(serverorclient, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 490, 110, 30));

        logo.setText("LOGOOOOOOO");
        add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, -1, -1));

        movementHistory.setModel(new javax.swing.AbstractListModel<String>() {
            final String[] strings = {"Movement HIstory"};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane2.setViewportView(movementHistory);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 90, 150, 150));
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

//TODO: connection start from here
        new Thread(this).start();

        //game.newGame();
        startButton.setText("Game Started");
        startButton.setEnabled(false);
        if (isServer) {
            serverorclient.setText("You are Server");
        } else {
            serverorclient.setText("You are Client");
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        //quit
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    public void sendChatMessage() {
        chatString[chatCount] = ("SENT: " + chattext.getText());
        btcomm.writeMessage("chat#" + chattext.getText());
        chatHistory.setListData(chatString);
        chatCount++;
        System.err.println("Chat Data Sent..........");
        //Call send message
    }

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        sendChatMessage();
    }//GEN-LAST:event_sendActionPerformed

    private void chattextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chattextActionPerformed
        // TODO add your handling code here:
        sendChatMessage();
    }//GEN-LAST:event_chattextActionPerformed

    private void chessPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chessPanelMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_chessPanelMouseMoved

    public void run() {
        if (isServer) {
            status.setText("Waiting for Client");

            System.err.println("Waiting for Client ");

            conn = btcomm.waitForClient();

        } else {
            status.setText("Waiting for Server");

            System.err.println("Waiting for Server ");
            conn = btcomm.connectToServer();
        }

        if (conn != null) {
            status.setText("Connected");
            chattext.setEnabled(true);
            send.setEnabled(true);
            windowChessGameController.BTGameNewGame(isServer, conn);
        } else {
            status.setText("No devices Found");

            connectionError();
        }
        //start reading ports
        while (btcomm.connectionAlive()) {
            rxString = btcomm.readData();
            System.err.println("Received :" + rxString);
            if (rxString.equals("Lost")) {
                System.err.println("Connection Losttt");
                status.setText("Connection Lost");
                status.setForeground(Color.red);
                connectionError();
            }
            if (rxString != null) {
                status.setForeground(new Color(51, 51, 51));
                status.setText("Some Data Received");
                rxCommands = CommandUtil.extractMessage(rxString);
                sendCommands(rxCommands);

            }
        }
    }

    public void sendCommands(String[] command) {
        System.err.println("*******inside sendCommands ************");
        for (String s : command) {
            System.err.println("Extracted" + s);
        }
        switch (command[0]) {
            case "makeEmpty":
                windowChessGameController.processCommands(command);
                break;
            case "playerCell":
                windowChessGameController.processCommands(command);
                break;
            case "pieceCell":
                windowChessGameController.processCommands(command);
                break;
            case "chat":
                //chat process from here
                System.err.println("#####################Chat Data Received........");
                chatString[chatCount] = ("RECEIVED: " + command[1]);
                //btcomm.writeMessage(command[1]);
                chatHistory.setListData(chatString);
                chatHistory.setVisibleRowCount(chatCount);
                chatCount++;

                break;
        }
        repaint();
    }

    private void connectionError() {
        chattext.setEnabled(true);
        send.setEnabled(true);
        btcomm.closeConnections();
        status.setText("Error on Connection");
        //TODO: stop thread
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    private javax.swing.JList<String> chatHistory;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JTextField chattext;
    private javax.swing.JPanel chessPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel logo;
    private javax.swing.JList<String> movementHistory;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton send;
    private javax.swing.JLabel serverorclient;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
    protected final ImageIcon bluechess;
    //private WindowChessGameBT windowChessGameController.windowChessGameBT;
    private WindowChessGameController windowChessGameController;
    private int chatCount;
    private final String[] chatString;
}